replicaCount: 1
backend:
  repository: mrnustik/habitator-api
  tag: 0.2.2
  otel-collector-endpoint: http://habitator-alloy:4317
alloy:
  alloy:
    extraPorts:
      - name: otel-grpc
        port: 4317
        targetPort: 4317
    configMap:
      content: |-
        prometheus.exporter.self "default" {
        }

        prometheus.scrape "metamonitoring" {
          targets    = prometheus.exporter.self.default.targets
          forward_to = [prometheus.remote_write.default.receiver]
        }

        discovery.kubernetes "pods" {
          role = "pod"

          namespaces {
            own_namespace = true
          }

          selectors {
            role  = "pod"
            label = "app in (expensifier-api)"
          }
        }

        prometheus.scrape "pods" {
          targets    = discovery.kubernetes.pods.targets
          forward_to = [prometheus.remote_write.default.receiver]
        }

        prometheus.remote_write "default" {
          endpoint {
            url = "http://monitoring-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
          }
        }

        logging {
          level    = "info"
          format   = "json"
          write_to = [loki.write.default.receiver]
        }

        loki.write "default" {
          endpoint {
            url = "http://monitoring-loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
          }
        }

        otelcol.exporter.otlphttp "default" {
          client {
            endpoint = "http://monitoring-loki.monitoring.svc.cluster.local:3100/otlp"
          }
        }

        tracing {
          sampling_fraction = 0.1
          write_to          = [otelcol.exporter.otlp.default.input]
        }

        otelcol.exporter.otlp "default" {
            client {
                endpoint = "monitoring-tempo.monitoring.svc.cluster.local:4317"
                tls { 
                  insecure = true
                }
            }
        }

        otelcol.processor.batch "example" {
          output {
            metrics = [otelcol.exporter.prometheus.default.input]
            logs    = [otelcol.exporter.otlphttp.default.input]
            traces  = [otelcol.exporter.otlp.default.input]
          }
        }

        otelcol.exporter.prometheus "default" {
          forward_to = [prometheus.remote_write.default.receiver]
        }

        otelcol.receiver.otlp "example" {
          grpc {
            endpoint = "0.0.0.0:4317"
          }

          http {
            endpoint = "0.0.0.0:4318"
          }

          output {
            metrics = [otelcol.processor.batch.example.input]
            logs    = [otelcol.processor.batch.example.input]
            traces  = [otelcol.processor.batch.example.input]
          }
        }
